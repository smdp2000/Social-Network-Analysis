library(igraph)
G <- read_graph('/home/samroadie/Desktop/expert/Dp/graphpng/karate.gml',format = 'gml')
G
idea1 <- "happy"
idea2 <- "sad"
V(G)$idea <- idea1
another_idea <- c(33,34) #these seed nodes give complete cascade case,other combination of seed nodes are below
V(G)$idea[another_idea] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")#assign color
plot(G , color = V(G)$color)
#first run recreate function then run below two lines 4 times u get a complete cascade as shown in report
G<-recreate(G,0.3)
plot(G,color = V(G)$color)
#MAIN FUNCTION WHICH RESET THE WHOLE SCENARIO
###############################################################
recreate <- function(G,threshold){
#threshold and new_graphs
for (i in V(G)){
#doing for only those node which have not adopted new behaviour
if( V(G)$idea[i] != idea2 ){
pow_idea1 = length(neighbors(G,i)[which(V(G)$idea[neighbors(G,i)] == idea1)])#number of neighbors of current node which have idea1
pow_idea2 = length(neighbors(G,i)[which(V(G)$idea[neighbors(G,i)] == idea2)])#number of neighbors of current node which have idea2
p = pow_idea2/(pow_idea1+pow_idea2)
if (p < threshold){
#retain idea
V(G)$idea[i] <- idea1
V(G)$color[i] <- "blue"}
else{
#adobt new idea
V(G)$idea[i] <- idea2
V(G)$color[i]<- "yellow"}
}
}
return (G)
}
##########################################################################
#VARIATION OF INPUTS
#(1.1)varying seed nodes(taking all combination two at a time)
####################################################################################
max_itr = 100
seed <- list()
for( i in 1:length(V(G))){
for (j in i+1:length(V(G))){
V(G)$idea <- idea1
#seed nodes
seed[[i]] <- c(i,j)
V(G)$idea[seed[[i]]] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")
#original_plot
plot(G , color = V(G)$color)
itr = 0
cascade_form = "incomplete"
while(itr<100){
if(length(which(V(G)$idea==idea1))== length(V(G))){
cascade_form <- "incomplete"
break
}
if(length(which(V(G)$idea==idea2))== length(V(G))){
cascade_form <- "complete"
break
}
G <- recreate(G,0.3)
itr = itr + 1
}
print(seed[[i]])
print(itr)
print("cascadesize")
print(length(which(V(G)$idea==idea2)))
print("people who didn't adopt new idea")
print(length(which(V(G)$idea==idea1)))
print(cascade_form)
plot(G , color = V(G)$color)
}
}
recreate <- function(G,threshold){
#threshold and new_graphs
for (i in V(G)){
#doing for only those node which have not adopted new behaviour
if( V(G)$idea[i] != idea2 ){
pow_idea1 = length(neighbors(G,i)[which(V(G)$idea[neighbors(G,i)] == idea1)])#number of neighbors of current node which have idea1
pow_idea2 = length(neighbors(G,i)[which(V(G)$idea[neighbors(G,i)] == idea2)])#number of neighbors of current node which have idea2
p = pow_idea2/(pow_idea1+pow_idea2)
if (p < threshold){
#retain idea
V(G)$idea[i] <- idea1
V(G)$color[i] <- "blue"}
else{
#adobt new idea
V(G)$idea[i] <- idea2
V(G)$color[i]<- "yellow"}
}
}
return (G)
}
library(igraph)
G <- read_graph('/home/samroadie/Desktop/expert/Dp/graphpng/karate.gml',format = 'gml')
G
idea1 <- "happy"
idea2 <- "sad"
V(G)$idea <- idea1
another_idea <- c(33,34) #these seed nodes give complete cascade case,other combination of seed nodes are below
V(G)$idea[another_idea] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")#assign color
plot(G , color = V(G)$color)
#first run recreate function then run below two lines 4 times u get a complete cascade as shown in report
G<-recreate(G,0.3)
plot(G,color = V(G)$color)
G<-recreate(G,0.3)
plot(G,color = V(G)$color)
G<-recreate(G,0.3)
plot(G,color = V(G)$color)
G<-recreate(G,0.3)
plot(G,color = V(G)$color)
max_itr = 100
seed <- list()
for( i in 1:length(V(G))){
for (j in i+1:length(V(G))){
V(G)$idea <- idea1
#seed nodes
seed[[i]] <- c(i,j)
V(G)$idea[seed[[i]]] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")
#original_plot
plot(G , color = V(G)$color)
itr = 0
cascade_form = "incomplete"
while(itr<100){
if(length(which(V(G)$idea==idea1))== length(V(G))){
cascade_form <- "incomplete"
break
}
if(length(which(V(G)$idea==idea2))== length(V(G))){
cascade_form <- "complete"
break
}
G <- recreate(G,0.3)
itr = itr + 1
}
print(seed[[i]])
print(itr)
print("cascadesize")
print(length(which(V(G)$idea==idea2)))
print("people who didn't adopt new idea")
print(length(which(V(G)$idea==idea1)))
print(cascade_form)
plot(G , color = V(G)$color)
}
}
#(1.2)Taking 5 nodes at random (generating 5 random nodes 5 times)
max_itr = 100
seed <- list()
for (i in 1:5){
V(G)$idea <- idea1
#seed nodes
seed[[i]] <- c(sample(V(G),5))
V(G)$idea[seed[[i]]] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")#assign color
#original_plot
plot(G , color = V(G)$color)
itr = 0
cascade_form = "incomplete"
while(itr<max_itr){
if(length(which(V(G)$idea==idea1))== length(V(G))){
cascade_form <- "incomplete"
break
}
if(length(which(V(G)$idea==idea2))== length(V(G))){
cascade_form <- "complete"
break
}
G <- recreate(G,0.3)
itr = itr + 1
}
print(seed[[i]])
print(itr)
print("cascadesize")
print(length(which(V(G)$idea==idea2)))
print("people who didn't adopt new idea")
print(length(which(V(G)$idea==idea1)))
print(cascade_form)
}
#(2.1)VARYING Thresholds
threshold = 0.6
max_itr = 100
#checking for each threshold and decreement it
for(i in (1:5)){
V(G)$idea <- idea1
another_idea <- c( 34,3,9,2,1)
V(G)$idea[another_idea] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")#assign color
#original_plot
plot(G , color = V(G)$color)
cascade_form = "incomplete"
#decreement threshold for each  iter
threshold = threshold - 0.1
itr = 0
while(itr<100){
if(length(which(V(G)$idea==idea1))== length(V(G))){
cascade_form <- "incomplete"
break
}
if(length(which(V(G)$idea==idea2))== length(V(G))){
cascade_form <- "complete"
break
}
G <- recreate(G,threshold)
itr = itr + 1
}
print(itr)
print("threshold")
print(threshold)
print("cascadesize")
print(length(which(V(G)$idea==idea2)))
print(cascade_form)
}
G <- read_graph('/home/samroadie/Desktop/expert/Dp/17BCS028_Cascading_Behaviour_In _Network_Assignment/karate.gml',format = 'gml')
recreate <- function(G,threshold){
#threshold and new_graphs
for (i in V(G)){
#doing for only those node which have not adopted new behaviour
if( V(G)$idea[i] != idea2 ){
pow_idea1 = length(neighbors(G,i)[which(V(G)$idea[neighbors(G,i)] == idea1)])#number of neighbors of current node which have idea1
pow_idea2 = length(neighbors(G,i)[which(V(G)$idea[neighbors(G,i)] == idea2)])#number of neighbors of current node which have idea2
p = pow_idea2/(pow_idea1+pow_idea2)
if (p < threshold){
#retain idea
V(G)$idea[i] <- idea1
V(G)$color[i] <- "blue"}
else{
#adobt new idea
V(G)$idea[i] <- idea2
V(G)$color[i]<- "yellow"}
}
}
return (G)
}
library(igraph)
G <- read_graph('/home/samroadie/Desktop/expert/Dp/17BCS028_Cascading_Behaviour_In _Network_Assignment/karate.gml',format = 'gml')
G
idea1 <- "happy"
idea2 <- "sad"
V(G)$idea <- idea1
another_idea <- c(33,34) #these seed nodes give complete cascade case,other combination of seed nodes are below
V(G)$idea[another_idea] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")#assign color
plot(G , color = V(G)$color)
#first run recreate function then run below two lines 4 times u get a complete cascade as shown in report
G<-recreate(G,0.3)
plot(G,color = V(G)$color)
#MAIN FUNCTION WHICH RESET THE WHOLE SCENARIO
#(1.2)Taking 5 nodes at random (generating 5 random nodes 5 times)
max_itr = 100
seed <- list()
for (i in 1:5){
V(G)$idea <- idea1
#seed nodes
seed[[i]] <- c(sample(V(G),5))
V(G)$idea[seed[[i]]] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")#assign color
#original_plot
plot(G , color = V(G)$color)
itr = 0
cascade_form = "incomplete"
while(itr<max_itr){
if(length(which(V(G)$idea==idea1))== length(V(G))){
cascade_form <- "incomplete"
break
}
if(length(which(V(G)$idea==idea2))== length(V(G))){
cascade_form <- "complete"
break
}
G <- recreate(G,0.3)
itr = itr + 1
}
print(seed[[i]])
print(itr)
print("cascadesize")
print(length(which(V(G)$idea==idea2)))
print("people who didn't adopt new idea")
print(length(which(V(G)$idea==idea1)))
print(cascade_form)
}
#(2.1)VARYING Thresholds
threshold = 0.6
max_itr = 100
#checking for each threshold and decreement it
for(i in (1:5)){
V(G)$idea <- idea1
another_idea <- c( 34,3,9,2,1)
V(G)$idea[another_idea] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")#assign color
#original_plot
plot(G , color = V(G)$color)
cascade_form = "incomplete"
#decreement threshold for each  iter
threshold = threshold - 0.1
itr = 0
while(itr<100){
if(length(which(V(G)$idea==idea1))== length(V(G))){
cascade_form <- "incomplete"
break
}
if(length(which(V(G)$idea==idea2))== length(V(G))){
cascade_form <- "complete"
break
}
G <- recreate(G,threshold)
itr = itr + 1
}
print(itr)
print("threshold")
print(threshold)
print("cascadesize")
print(length(which(V(G)$idea==idea2)))
print(cascade_form)
}
max_itr = 100
seed <- list()
for( i in 1:length(V(G))){
for (j in i+1:length(V(G))){
V(G)$idea <- idea1
#seed nodes
seed[[i]] <- c(i,j)
V(G)$idea[seed[[i]]] <- idea2
V(G)$color <- ifelse(V(G)$idea == idea1 , "blue","yellow")
#original_plot
plot(G , color = V(G)$color)
itr = 0
cascade_form = "incomplete"
while(itr<100){
if(length(which(V(G)$idea==idea1))== length(V(G))){
cascade_form <- "incomplete"
break
}
if(length(which(V(G)$idea==idea2))== length(V(G))){
cascade_form <- "complete"
break
}
G <- recreate(G,0.3)
itr = itr + 1
}
print(seed[[i]])
print(itr)
print("cascadesize")
print(length(which(V(G)$idea==idea2)))
print("people who didn't adopt new idea")
print(length(which(V(G)$idea==idea1)))
print(cascade_form)
plot(G , color = V(G)$color)
}
}
